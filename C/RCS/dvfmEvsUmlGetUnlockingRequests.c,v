head	1.1;
access;
symbols;
locks
	ewerton.silles:1.1; strict;
comment	@ * @;


1.1
date	2008.02.01.10.19.06;	author ewerton.silles;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Universidade Federal do Rio de Janeiro
 * Escola Politecnica
 * Departamento de Eletronica e de Computacao
 * Prof. Marcelo Luiz Drumond Lanza
 * EEL 270 - Computacao II - Turma 2019/2
 
 * $Author$
 * $Date$
 * $Log$
*/

#include	<stdio.h>
#include	<string.h>
#include	"dvfmEvsUmlGetUnlockingRequests.h"
#include	"dvfmEvsUmlGetUsers.h"

/*
 * dvfmEvsUmlErrorType
 * DvfmEvsUmlGetUnlockingRequests (dvfmEvsUmlConfigurationOptionsType *,
 *                                 char *,
 *                                 dvfmEvsUmlNicknameListType **);
 *
 * Arguments:
 * dvfmEvsUmlConfigurationOptionsType * - Configuration options (I)
 * char * - nickname string (I)
 * dvfmEvsUmlNicknameListType ** - first element in the list containing nickname of users requesting account unlocking (O)
 *
 * Returned code:
 * 
 * dvfmEvsUmlErrorType - integer that correspond a error
 * 
 * Description:
 * Return a list containing the data of all users requesting account unlocking.
 */

dvfmEvsUmlErrorType
DvfmEvsUmlGetUnlockingRequests (dvfmEvsUmlConfigurationOptionsType *dvfmEvsUmlSettings,
                                char *dvfmEvsUmlNickname,
                                dvfmEvsUmlNicknameListType **dvfmEvsUmlNicknameList)
{
    unsigned short dvfmEvsUmlIndex;
    dvfmEvsUmlErrorType dvfmEvsUmlErrorCode;
    dvfmEvsUmlUserDataType *dvfmEvsUmlUserData = (dvfmEvsUmlUserDataType *) malloc(sizeof(dvfmEvsUmlUserDataType));
    dvfmEvsUmlNicknameListType *dvfmEvsUmlCurrentNickname = (dvfmEvsUmlNicknameListType *) malloc(sizeof(dvfmEvsUmlNicknameListType)),
                               *dvfmEvsUmlFirstNickname = dvfmEvsUmlCurrentNickname;
    FILE *dvfmEvsUmlRead;
    char dvfmEvsUmlBuffer [DVFM_EVS_UML_MAXIMUM_LENGTH_CONFIG_FILE];
    char dvfmEvsUmlAuxiliary [2] = "0\0";
	char *dvfmEvsUmlValidation;
    dvfmEvsUmlUserIdentifierType dvfmEvsUmlNumericIdentifier;

    if (!dvfmEvsUmlSettings)
        return dvfmEvsUmlFirstEmptyPointer;

    if (!dvfmEvsUmlNickname)
        return dvfmEvsUmlSecondEmptyPointer;

    if (!dvfmEvsUmlNicknameList)
        return dvfmEvsUmlThirdEmptyPointer;

    dvfmEvsUmlErrorCode = DvfmEvsUmlGetUsers (dvfmEvsUmlSettings, &dvfmEvsUmlUserData);
    if (dvfmEvsUmlErrorCode)
        return dvfmEvsUmlSecondaryFunction;

    while (strcmp(dvfmEvsUmlUserData->dvfmEvsUmlNickname, dvfmEvsUmlNickname))
        dvfmEvsUmlUserData = dvfmEvsUmlUserData->dvfmEvsUmlNextUserData;
    
    if (!dvfmEvsUmlUserData)
        return dvfmEvsUmlUserNotFound;

    if (dvfmEvsUmlUserData->dvfmEvsUmlProfile != dvfmEvsUmlAdministrator)
        return dvfmEvsUmlUserIsNotAdministrator;

    if(!(dvfmEvsUmlRead = fopen(dvfmEvsUmlSettings->dvfmEvsUmlUnlockingUsersDataFilename, "rb")))
        return dvfmEvsUmlCantOpenFile;
    
    while(fgets(dvfmEvsUmlBuffer, DVFM_EVS_UML_MAXIMUM_LENGTH_CONFIG_FILE, dvfmEvsUmlRead))
    {
        if (!strstr(dvfmEvsUmlBuffer, ":"))
        {
            fclose(dvfmEvsUmlRead);
            return dvfmEvsUmlReadError;
        }

        dvfmEvsUmlIndex = strlen(dvfmEvsUmlBuffer) - strlen(strstr(dvfmEvsUmlBuffer, ":"));
        dvfmEvsUmlBuffer [dvfmEvsUmlIndex] = '\0';
        if (((time_t) strtoul(dvfmEvsUmlBuffer, &dvfmEvsUmlValidation, 10)) > 0)
        {
            dvfmEvsUmlBuffer [dvfmEvsUmlIndex] = ':';

            strcpy(dvfmEvsUmlBuffer, strstr(dvfmEvsUmlBuffer, ":"));
            dvfmEvsUmlAuxiliary [0] = dvfmEvsUmlBuffer[1];
            strcpy(dvfmEvsUmlBuffer, strstr(dvfmEvsUmlBuffer, dvfmEvsUmlAuxiliary));

            dvfmEvsUmlNumericIdentifier = (dvfmEvsUmlUserIdentifierType) strtoul(dvfmEvsUmlBuffer, &dvfmEvsUmlValidation, 10);

            while (dvfmEvsUmlUserData->dvfmEvsUmlPreviousUserData)
                dvfmEvsUmlUserData = dvfmEvsUmlUserData->dvfmEvsUmlPreviousUserData;

            while (dvfmEvsUmlUserData->dvfmEvsUmlNickname != dvfmEvsUmlNumericIdentifier)
                dvfmEvsUmlUserData = dvfmEvsUmlUserData->dvfmEvsUmlNextUserData;

            strcpy(dvfmEvsUmlCurrentNickname->dvfmEvsUmlNickname, dvfmEvsUmlUserData->dvfmEvsUmlNickname);
            dvfmEvsUmlCurrentNickname->dvfmEvsUmlNextNickname = (dvfmEvsUmlUserDataType *) malloc(sizeof(dvfmEvsUmlUserDataType));
            dvfmEvsUmlCurrentNickname = dvfmEvsUmlCurrentNickname->dvfmEvsUmlNextNickname;
        }
    }

    dvfmEvsUmlCurrentNickname = NULL;

    if(ferror(dvfmEvsUmlRead))
    {
        fclose(dvfmEvsUmlRead);
        return dvfmEvsUmlReadError;
    }

    fclose(dvfmEvsUmlRead);

    if (dvfmEvsUmlFirstNickname->dvfmEvsUmlNickname)
        return dvfmEvsUmlEmptyList;
    
    *dvfmEvsUmlNicknameList = dvfmEvsUmlFirstNickname;

    return dvfmEvsUmlOk;
}

/* $RCSfile$ */
@
