head	1.1;
access;
symbols;
locks
	ewerton.silles:1.1; strict;
comment	@ * @;


1.1
date	2019.11.30.04.31.06;	author ewerton.silles;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
Universidade Federal do Rio de Janeiro
Escola Politecnica
Departamento de Eletronica e de Computacao
Prof. Marcelo Luiz Drumond Lanza
EEL 270 - Computacao II - Turma 2019/2
 
$Author$
$Date$
$Log$
*/

#include					<stdio.h>
#include					<stdlib.h>
#include					"dvfmEvsUmlFunctions.h"

#define DVFM_EVS_NUMBER_ARGUMENTS			    		5

#define DVFM_EVS_OK								    	0
#define DVFM_EVS_NUMBER_ARGUMENTS_INVALID			    1
#define DVFM_EVS_THIRD_ARGUMENT_INVALID				    2
#define DVFM_EVS_THIRD_ARGUMENT_INVALID_HIFEN		    3
#define DVFM_EVS_FOURTH_ARGUMENT_INVALID			    4
#define DVFM_EVS_FOURTH_ARGUMENT_INVALID_HIFEN		    5

#define DVFM_EVS_EOS									'\0'

int
main(int argc,char *argv[ ]) 
{
    dvfmEvsUmlErrorType dvfmEvsUmlErrorCode;
    size_t dvfmEvsUmlMinimumSize;
    size_t dvfmEvsUmlMaximumSize;
	char *dvfmEvsUmlvalidation;
	if (argc != DVFM_EVS_NUMBER_ARGUMENTS) 
	{
		printf("use: %s <string> <valid_character> <minimum_size> <maximum_size>\n", argv[0]);
		exit(DVFM_EVS_NUMBER_ARGUMENTS_INVALID);
	}

    if(argv[3][0] == '-')
	{
		printf("Error: First argument invalid\n");
		printf("First character invalid: \"-\"\n");
		exit(DVFM_EVS_THIRD_ARGUMENT_INVALID_HIFEN);
	}
	
	dvfmEvsUmlMinimumSize = (size_t) strtoul( argv[3], &dvfmEvsUmlvalidation, 10);
	if(*dvfmEvsUmlvalidation != DVFM_EVS_EOS)
	{
		printf("Error: First argument invalid\n");
		printf("First character invalid: \"%c\"\n", dvfmEvsUmlvalidation[0]);
		exit(DVFM_EVS_THIRD_ARGUMENT_INVALID);
	}

	if(argv[4][0] == '-')
	{
		printf("Error: Second argument invalid\n");
		printf("First character invalid: \"-\"\n");
		exit(DVFM_EVS_FOURTH_ARGUMENT_INVALID_HIFEN);
	}

    dvfmEvsUmlMaximumSize = (size_t) strtoul( argv[4], &dvfmEvsUmlvalidation, 10);
	if(*dvfmEvsUmlvalidation != DVFM_EVS_EOS)
	{
		printf("Error: Argumento dois invalido\n");
		printf("First character invalid: \"%c\"\n", dvfmEvsUmlvalidation[0]);
		exit(DVFM_EVS_FOURTH_ARGUMENT_INVALID);
	}

    dvfmEvsUmlErrorCode = DvfmEvsUmlCheckStringField(argv[1], argv[2], dvfmEvsUmlMinimumSize, dvfmEvsUmlMaximumSize);
	if (dvfmEvsUmlErrorCode)
    {
        printf("%s\n", DvfmEvsUmlGetCliErrorMessage(dvfmEvsUmlErrorCode, dvfmEvsUmlEnglish));
        exit(DVFM_EVS_OK);
    }
    printf("The string is valid.\n");
    
	return DVFM_EVS_OK;
}
/* $RCSfile$ */
@
