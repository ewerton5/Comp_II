head	1.2;
access;
symbols;
locks
	ewerton.silles:1.2; strict;
comment	@ * @;


1.2
date	2020.01.24.05.37.49;	author ewerton.silles;	state Exp;
branches;
next	1.1;

1.1
date	2019.12.24.13.52.26;	author ewerton.silles;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@/*
Universidade Federal do Rio de Janeiro
Escola Politecnica
Departamento de Eletronica e de Computacao
Prof. Marcelo Luiz Drumond Lanza
EEL 270 - Computacao II - Turma 2019/2
 
$Author: ewerton.silles $
$Date: 2019/12/24 13:52:26 $
$Log: dvfmEvsUmlRunNcursesInterfaceTestFile.c,v $
Revision 1.1  2019/12/24 13:52:26  ewerton.silles
Initial revision

*/

#include					<stdio.h>
#include					<stdlib.h>
#include					"dvfmEvsUmlRunNcursesInterface.h"
#include					"dvfmEvsUmlFunctions.h"

#define DVFM_EVS_NUMBER_ARGUMENTS						3

#define DVFM_EVS_OK										0
#define DVFM_EVS_NUMBER_ARGUMENTS_INVALID				1
#define DVFM_EVS_FIRST_ARGUMENT_INVALID				    2
#define DVFM_EVS_FIRST_ARGUMENT_INVALID_HIFEN		    3
#define DVFM_EVS_SECOND_ARGUMENT_INVALID				4
#define DVFM_EVS_SECOND_ARGUMENT_INVALID_HIFEN		    5

#define DVFM_EVS_EOS									'\0'

int
main(int argc,char *argv[ ]) 
{
	dvfmEvsUmlErrorType dvfmEvsUmlErrorCode;
    dvfmEvsUmlConfigurationOptionsType *dvfmEvsUmlSettings = (dvfmEvsUmlConfigurationOptionsType *) malloc(sizeof(dvfmEvsUmlConfigurationOptionsType));
	dvfmEvsUmlLanguageType dvfmEvsUmlLanguage;
	char *dvfmEvsUmlValidation;

	if (argc != DVFM_EVS_NUMBER_ARGUMENTS) 
	{
		printf("use: %s <nickname> <language_number>\n", argv[0]);
		exit(DVFM_EVS_NUMBER_ARGUMENTS_INVALID);
	}

	if(argv[2][0] == '-')
	{
		printf("Error: Second argument invalid\n");
		printf("First character invalid: \"-\"\n");
		exit(DVFM_EVS_SECOND_ARGUMENT_INVALID_HIFEN);
	}

	dvfmEvsUmlLanguage = (dvfmEvsUmlLanguageType) strtoul( argv[2], &dvfmEvsUmlValidation, 10);
	if(*dvfmEvsUmlValidation != DVFM_EVS_EOS)
	{
		printf("Error: Argumento dois invalido\n");
		printf("First character invalid: \"%c\"\n", dvfmEvsUmlValidation[0]);
		exit(DVFM_EVS_SECOND_ARGUMENT_INVALID);
	}


    dvfmEvsUmlErrorCode = DvfmEvsUmlGetConfigurationOptionsValues(NULL, dvfmEvsUmlSettings);
	if (dvfmEvsUmlErrorCode)
    {
        printf("%s\n", DvfmEvsUmlGetCliErrorMessage(dvfmEvsUmlErrorCode, dvfmEvsUmlLanguage));
        exit(DVFM_EVS_OK);
    }

    dvfmEvsUmlErrorCode = DvfmEvsUmlRunNcursesInterface(dvfmEvsUmlSettings, argv[1], dvfmEvsUmlLanguage);
	if (dvfmEvsUmlErrorCode)
    {
        printf("%s\n", DvfmEvsUmlGetCliErrorMessage(dvfmEvsUmlErrorCode, dvfmEvsUmlLanguage));
        exit(DVFM_EVS_OK);
    }

	return DVFM_EVS_OK;
}
/* $RCSfile: dvfmEvsUmlRunNcursesInterfaceTestFile.c,v $ */
@


1.1
log
@Initial revision
@
text
@d8 6
a13 3
$Author$
$Date$
$Log$
d38 1
a38 1
	char *dvfmEvsUmlvalidation;
d53 2
a54 2
	dvfmEvsUmlLanguage = (dvfmEvsUmlLanguageType) strtoul( argv[2], &dvfmEvsUmlvalidation, 10);
	if(*dvfmEvsUmlvalidation != DVFM_EVS_EOS)
d57 1
a57 1
		printf("First character invalid: \"%c\"\n", dvfmEvsUmlvalidation[0]);
d78 1
a78 1
/* $RCSfile$ */
@
